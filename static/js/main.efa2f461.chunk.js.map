{"version":3,"sources":["selector.tsx","recipes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MyValueContainer","children","props","children1","length","map","child","React","cloneElement","key","forEach","newChild","index","ValueContainer","Selector","recipes","onChange","options","useMemo","recipe","label","title","value","handleChange","useCallback","actionMeta","x","isMulti","isSearchable","components","App","useState","selected","setSelected","useEffect","stored","localStorage","getItem","JSON","parse","values","keys","r","setItem","stringify","ingredients","console","log","reduce","acc","Object","ing","val","CssBaseline","Typography","variant","join","Table","TableHead","TableRow","TableCell","TableBody","sort","i","sum","Number","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efa2f461.chunk.js","sourcesContent":["import { Recipes } from \"./recipes\";\r\nimport React, { PropsWithChildren, useCallback, useMemo } from \"react\";\r\nimport Select, { ActionMeta, ValueType, components } from \"react-select\";\r\n\r\nconst MyValueContainer = ({\r\n  children = [],\r\n  ...props\r\n}: PropsWithChildren<any>) => {\r\n  const children1 = children as any;\r\n  if (children1[0] && children1[0].length) {\r\n    const newChilds = children1[0].map((child: any) =>\r\n      React.cloneElement(child, { key: child.props.children })\r\n    );\r\n    newChilds.forEach((newChild: any, index: number) => {\r\n      children[0][index] = newChild;\r\n    });\r\n    // children[0] = newChilds;  wont work. children[0] is readonly\r\n  }\r\n  return (\r\n    <components.ValueContainer {...props}>\r\n      {children1}\r\n    </components.ValueContainer>\r\n  );\r\n};\r\n\r\ninterface OwnProps {\r\n  recipes: Recipes;\r\n  onChange: (recipes: Recipes | null | undefined) => void;\r\n}\r\n\r\nexport default function Selector({ recipes, onChange }: OwnProps) {\r\n  const options = useMemo(\r\n    () => recipes.map(recipe => ({ label: recipe.title, value: recipe })),\r\n    [recipes]\r\n  );\r\n\r\n  const handleChange = useCallback(\r\n    (value: ValueType<any>, actionMeta: ActionMeta) => {\r\n      if (value) onChange(value.map((x: any) => x.value));\r\n    },\r\n    [onChange]\r\n  );\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      isMulti\r\n      isSearchable\r\n      onChange={handleChange}\r\n      components={{\r\n        ValueContainer: MyValueContainer\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import recipesList from \"./recipes.json\";\n\nexport interface Recipe {\n  title: string;\n  ingredients: Record<string, string>;\n}\n\nexport type Recipes = readonly Recipe[];\n\nconst recipes: Recipes = recipesList;\n\nexport default recipes;\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport \"./App.css\";\nimport Selector from \"./selector\";\nimport recipes, { Recipes } from \"./recipes\";\nimport { map, sum } from \"ramda\";\nimport {\n  CssBaseline,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography\n} from \"@material-ui/core\";\n\nconst App: React.FC = () => {\n  const [selected, setSelected] = useState<Recipes>([]);\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"recipes\");\n    if (stored) {\n      setSelected(JSON.parse(stored));\n    }\n  }, []);\n\n  const handleChange = useCallback((values: Recipes | null | undefined) => {\n    setSelected(values || []);\n    if (values != null) {\n      const keys = values.map(r => r.title);\n      localStorage.setItem(\"recipes\", JSON.stringify(keys || []));\n    }\n  }, []);\n\n  const ingredients = useMemo<Record<string, string[]>>(() => {\n    console.log(\"foo\");\n    return selected.reduce<Record<string, string[]>>((acc, { ingredients }) => {\n      if (!ingredients) return acc;\n\n      console.log(acc, ingredients);\n      console.log(Object.keys(ingredients));\n\n      return Object.keys(ingredients).reduce((ing, key) => {\n        const val = ingredients[key];\n        return {\n          ...ing,\n          [key]: [...(ing[key] || []), val]\n        };\n      }, acc);\n    }, {});\n  }, [selected]);\n\n  return (\n    <>\n      <CssBaseline />\n      <div>\n        <Selector recipes={recipes} onChange={handleChange} />\n        <Typography variant={\"body1\"}>\n          {selected.map(x => x.title).join(\", \")}\n        </Typography>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Ингредиент</TableCell>\n              <TableCell>Сумма (по частям)</TableCell>\n              <TableCell>Сумма</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {Object.keys(ingredients)\n              .sort()\n              .map(i => (\n                <TableRow>\n                  <TableCell>{i}</TableCell>\n                  <TableCell>{ingredients[i].join(\", \")}</TableCell>\n                  <TableCell>\n                    {sum(map(Number.parseInt, ingredients[i])) || 0}\n                  </TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}