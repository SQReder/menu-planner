{"version":3,"sources":["selector.tsx","recipes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MyValueContainer","children","props","children1","length","map","child","React","cloneElement","key","forEach","newChild","index","ValueContainer","Selector","recipes","onChange","options","useMemo","recipe","label","title","value","handleChange","useCallback","actionMeta","x","isMulti","isSearchable","components","App","useState","selected","setSelected","portions","setPortions","values","newSelected","newPortions","reduce","acc","ingredients","portionCount","Object","keys","ing","val","amount","parseInt","currentValues","CssBaseline","Container","maxWidth","style","marginTop","Typography","variant","component","gutterBottom","Grid","container","spacing","item","xs","Paper","padding","Table","TableHead","TableRow","TableCell","TableBody","TextField","type","e","recipeTitle","count","handlePortionChange","target","inputProps","min","step","sort","i","join","sum","Number","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25368c0b.chunk.js","sourcesContent":["import { Recipes } from \"./recipes\";\r\nimport React, { PropsWithChildren, useCallback, useMemo } from \"react\";\r\nimport Select, { ActionMeta, ValueType, components } from \"react-select\";\r\n\r\nconst MyValueContainer = ({\r\n  children = [],\r\n  ...props\r\n}: PropsWithChildren<any>) => {\r\n  const children1 = children as any;\r\n  if (children1[0] && children1[0].length) {\r\n    const newChilds = children1[0].map((child: any) =>\r\n      React.cloneElement(child, { key: child.props.children })\r\n    );\r\n    newChilds.forEach((newChild: any, index: number) => {\r\n      children[0][index] = newChild;\r\n    });\r\n    // children[0] = newChilds;  wont work. children[0] is readonly\r\n  }\r\n  return (\r\n    <components.ValueContainer {...props}>\r\n      {children1}\r\n    </components.ValueContainer>\r\n  );\r\n};\r\n\r\ninterface OwnProps {\r\n  recipes: Recipes;\r\n  onChange: (recipes: Recipes | null | undefined) => void;\r\n}\r\n\r\nexport default function Selector({ recipes, onChange }: OwnProps) {\r\n  const options = useMemo(\r\n    () => recipes.map(recipe => ({ label: recipe.title, value: recipe })),\r\n    [recipes]\r\n  );\r\n\r\n  const handleChange = useCallback(\r\n    (value: ValueType<any>, actionMeta: ActionMeta) => {\r\n      if (value) onChange(value.map((x: any) => x.value));\r\n    },\r\n    [onChange]\r\n  );\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      isMulti\r\n      isSearchable\r\n      onChange={handleChange}\r\n      components={{\r\n        ValueContainer: MyValueContainer\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import recipesList from \"./recipes.json\";\r\n\r\nexport interface Recipe {\r\n  title: string;\r\n  ingredients: Record<string, string>;\r\n}\r\n\r\nexport type Recipes = readonly Recipe[];\r\n\r\nconst recipes: Recipes = recipesList;\r\n\r\nexport default recipes;\r\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport \"./App.css\";\nimport Selector from \"./selector\";\nimport recipes, { Recipes } from \"./recipes\";\nimport { map, sum } from \"ramda\";\nimport {\n  Container,\n  CssBaseline,\n  Grid,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\n\nconst App: React.FC = () => {\n  const [selected, setSelected] = useState<Recipes>([]);\n  const [portions, setPortions] = useState<Record<string, number>>({});\n\n\n\n  const handleChange = useCallback(\n    (values: Recipes | null | undefined) => {\n      const newSelected = values || [];\n      setSelected(newSelected);\n\n      const newPortions = (newSelected || []).reduce<Record<string, number>>(\n        (acc, recipe) => {\n          acc[recipe.title] = portions[recipe.title] || 1;\n          return acc;\n        },\n        {}\n      );\n      setPortions(newPortions);\n    },\n    [portions]\n  );\n\n  const handlePortionChange = (recipeTitle: string, count: number) => {\n    const newPortions = {\n      ...portions,\n      [recipeTitle]: count >= 1 ? count : 1\n    };\n    setPortions(newPortions);\n  };\n\n  const ingredients = useMemo<Record<string, string[]>>(() => {\n    return selected.reduce<Record<string, string[]>>((acc, recipe) => {\n      if (!recipe.ingredients) return acc;\n\n      const portionCount = portions[recipe.title] || 1;\n\n      return Object.keys(recipe.ingredients).reduce((ing, key) => {\n        const val = recipe.ingredients[key];\n        const amount = (parseInt(val, 10) || 0) * portionCount;\n\n        if (amount === 0) return ing;\n\n        const currentValues = ing[key] || [];\n\n        return {\n          ...ing,\n          [key]: [...currentValues, `${amount}`]\n        };\n      }, acc);\n    }, {});\n  }, [selected, portions]);\n\n  return (\n    <>\n      <CssBaseline />\n      <Container maxWidth=\"md\" style={{ marginTop: '2rem' }}>\n        <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n          Планировщик меню\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Paper style={{ padding: '1rem' }}>\n              <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n                Выберите рецепты\n              </Typography>\n              <Selector recipes={recipes} onChange={handleChange} />\n            </Paper>\n          </Grid>\n\n          {selected.length > 0 && (\n            <Grid item xs={12}>\n              <Paper style={{ padding: '1rem' }}>\n                <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n                  Укажите количество порций\n                </Typography>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Рецепт</TableCell>\n                      <TableCell>Количество порций</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {selected.map(recipe => (\n                      <TableRow key={recipe.title}>\n                        <TableCell>{recipe.title}</TableCell>\n                        <TableCell>\n                          <TextField\n                            type=\"number\"\n                            value={portions[recipe.title] || 1}\n                            onChange={e =>\n                              handlePortionChange(\n                                recipe.title,\n                                parseInt(e.target.value, 10)\n                              )\n                            }\n                            inputProps={{ min: 1, step: 1 }}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </Paper>\n            </Grid>\n          )}\n\n          {Object.keys(ingredients).length > 0 && (\n            <Grid item xs={12}>\n              <Paper style={{ padding: '1rem' }}>\n                <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n                  Список покупок\n                </Typography>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Ингредиент</TableCell>\n                      <TableCell>Сумма (по частям)</TableCell>\n                      <TableCell>Сумма</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {Object.keys(ingredients)\n                      .sort()\n                      .map(i => (\n                        <TableRow key={i}>\n                          <TableCell>{i}</TableCell>\n                          <TableCell>{ingredients[i].join(\", \")}</TableCell>\n                          <TableCell>\n                            {sum(map(Number.parseInt, ingredients[i])) || 0}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </Paper>\n            </Grid>\n          )}\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}